# Sudoku CSP Solver - Lab 4 & 5

This project implements a Sudoku solver using **Constraint Satisfaction Problem (CSP)** techniques in Python. The solver uses **Backtracking Search** with **Forward Checking** and **Arc Consistency (AC-3)** algorithms to solve puzzles efficiently.

## 📁 File Structure
```
Lab45-Sudoku/
├── csp.py             # CSP representation for Sudoku (variables, domains, peers)
├── search.py          # CSP search algorithms: Backtracking & AC-3
├── sudoku.py          # Main driver script for reading, solving and outputting puzzles
├── util.py            # Utility functions (provided, do not edit)
├── data/
│   ├── euler.txt      # 50 Sudoku puzzles from Project Euler
│   └── magictour.txt  # 95 challenging puzzles
├── sol_euler.txt      # Output: solutions to euler.txt (to be generated)
├── sol_magic.txt      # Output: solutions to magictour.txt (to be generated)
└── README.md          # This file
```

## ▶️ How to Run
Make sure you have Python 3 installed and set up properly.

### 1. Run Solver on a Puzzle File
```bash
python sudoku.py --inputFile data/euler.txt
```

### 2. Save Output to File
```bash
python sudoku.py --inputFile data/euler.txt > sol_euler.txt
python sudoku.py --inputFile data/magictour.txt > sol_magic.txt
```

## Implementation Details
- **Exercise 1**: `csp.py` defines variables, domains, units, peers, and constraints.
- **Exercise 2**: `search.py` implements Backtracking Search using MRV heuristic and Forward Checking.
- **Exercise 3**: `search.py` also implements AC-3 algorithm for constraint propagation.

## Input Format
Each puzzle in `euler.txt` or `magictour.txt` is a single line of 81 digits:
- Digits `1`-`9` for known values
- `0` for empty cells

## Output Format
- Each solution is a line of 81 digits, representing the filled Sudoku grid, in the same order as input.

## Time Estimate
I spent approximately **X hours** on this lab.

## Experience
- Enjoyed implementing CSP concepts practically.
- Learned how constraint propagation and heuristics improve performance.
- Debugging AC-3 propagation logic was the most challenging part.

---
**Author:** Hoàng Văn Mạnh
**Student ID:** ITDSIU21099
**Course:** Artificial Intelligence
